---
import Base from "../../layouts/Base.astro";
import Nav from "../../components/Nav.tsx";
import Footer from "../../components/Footer.tsx";
import ProjectsGrid, { type Project } from "../../components/ProjectsGrid.tsx"; // <-- ändra till ProjectGrid.tsx om din fil heter så
import ReposGrid from "../../components/ReposGrid.tsx";
import { getCollection, type CollectionEntry } from "astro:content";
import { getUserRepos } from "../../lib/github";

// Säker join av BASE_URL + path
const withBase = (p?: string) => {
  if (!p) return undefined;
  const base = import.meta.env.BASE_URL || "/";
  const b = base.endsWith("/") ? base.slice(0, -1) : base;
  const pp = p.startsWith("/") ? p.slice(1) : p;
  return `${b}/${pp}`;
};

// ---- Hämta projekt (oförändrat) ----
type ProjEntry = CollectionEntry<"projects">;

const raw = await getCollection("projects");
const projects: Project[] = raw
  .map((p: ProjEntry): Project => ({
    slug: p.id.split("/").pop()?.replace(/\.(md|mdx)$/, "") ?? p.id,
    title: p.data.title,
    summary: p.data.summary,
    tags: p.data.tags,
    image: withBase(p.data.image),
    repo: p.data.repo,
    demo: p.data.demo,
    date: p.data.date ?? null,
  }))
  .sort((a: Project, b: Project) => (b.date ?? "").localeCompare(a.date ?? ""));

// ---- Nytt: liten “Kompetenser”-sektion byggd från taggar (+ extras) ----
type Skill = { key: string; label: string; icon: string; count?: number; href?: string };

const skillMeta: Record<string, Skill> = {
  react:       { key: "react", label: "React",       icon: "⚛️", href: "https://react.dev" },
  astro:       { key: "astro", label: "Astro",       icon: "🌟", href: "https://astro.build" },
  tailwind:    { key: "tailwind", label: "Tailwind", icon: "💨", href: "https://tailwindcss.com" },
  typescript:  { key: "typescript", label: "TypeScript", icon: "🟦", href: "https://www.typescriptlang.org" },
  javascript:  { key: "javascript", label: "JavaScript", icon: "🟨" },
  gsap:        { key: "gsap", label: "GSAP",         icon: "🌀", href: "https://gsap.com" },
  lottie:      { key: "lottie", label: "Lottie",     icon: "🎞️", href: "https://airbnb.io/lottie/#/" },
  harvest:     { key: "harvest", label: "Harvest",   icon: "⏱️", href: "https://www.getharvest.com/" },
};

const tagCounts = new Map<string, number>();
for (const p of projects) {
  for (const t of (p.tags ?? [])) {
    const k = String(t).toLowerCase();
    tagCounts.set(k, (tagCounts.get(k) ?? 0) + 1);
  }
}

const derivedSkills: Skill[] = Array.from(tagCounts.entries()).map(([k, n]) => {
  const meta = skillMeta[k] ?? { key: k, label: k.charAt(0).toUpperCase() + k.slice(1), icon: "🔧" };
  return { ...meta, count: n };
});

// Visa även vissa extra skills även om de inte finns i tags ännu.
const extras = ["react", "astro", "tailwind", "typescript", "gsap", "lottie", "harvest"];
for (const k of extras) {
  if (!derivedSkills.some((s) => s.key === k) && skillMeta[k]) {
    derivedSkills.push(skillMeta[k]);
  }
}

// Sortera: flest förekomster först, sedan alfabetiskt; plocka topp 12
const skills: Skill[] = derivedSkills
  .sort((a: Skill, b: Skill) => (b.count ?? 0) - (a.count ?? 0) || a.label.localeCompare(b.label))
  .slice(0, 12);

// ---- GitHub-repon (server/build) + filtrera bort dubbletter som redan har case ----
function extractRepoName(url?: string | null) {
  if (!url) return null;
  const m = url.match(/github\.com\/[\w-]+\/([\w.-]+)/i);
  return m?.[1]?.toLowerCase() ?? null;
}
const existingNames = new Set(
  projects.map((p) => extractRepoName(p.repo)).filter(Boolean) as string[]
);

const username = "AdrianCPO";
const token = import.meta.env.GITHUB_TOKEN as string | undefined; // valfritt
const ghAll = await getUserRepos({ username, token, hideForks: true, includeArchived: false });

const ghRepos = ghAll
  .filter((r) => !existingNames.has(r.name.toLowerCase()))
  .map((r) => ({
    name: r.name,
    html_url: r.html_url,
    description: r.description,
    language: r.language,
    stargazers_count: r.stargazers_count,
    forks_count: r.forks_count,
    homepage: r.homepage,
    pushed_at: r.pushed_at,
  }));
---

<Base title="Projekt – Adrian">
  <Fragment slot="header"><Nav client:load /></Fragment>

  <h1 class="text-2xl font-bold mb-4">Projekt</h1>

  <!-- Kompetenser (chips) -->
  <section class="mb-6 rounded-xl border p-4">
    <h2 class="text-base font-semibold mb-2">Kompetenser</h2>
    <ul class="flex flex-wrap gap-2">
      {skills.map((s) => (
        <a
          href={s.href ?? "#projects-list"}
          class="inline-flex items-center gap-1 rounded-full border px-3 py-1 text-xs hover:bg-slate-50 dark:hover:bg-slate-800"
          aria-label={`Kompetens: ${s.label}${s.count ? `, används i ${s.count} projekt` : ""}`}
        >
          <span aria-hidden="true">{s.icon}</span>
          <span>{s.label}</span>
          {s.count ? <span class="opacity-70">({s.count})</span> : null}
        </a>
      ))}
    </ul>
  </section>

  <!-- Dina kuraterade case -->
  <div id="projects-list">
    <ProjectsGrid items={projects} />
  </div>

  <!-- Övriga GitHub-repon under, utan dubbletter -->
  {ghRepos.length ? (
    <section class="mt-10">
      <h2 class="text-xl font-semibold mb-3">Övriga GitHub-repon</h2>
      <ReposGrid items={ghRepos} />
    </section>
  ) : null}

  <Fragment slot="footer"><Footer /></Fragment>
</Base>

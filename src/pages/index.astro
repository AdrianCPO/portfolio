---
import Base from "../layouts/Base.astro";
import Nav from "../components/Nav.tsx";
import Footer from "../components/Footer.tsx";
import ProjectsGrid, { type Project } from "../components/ProjectsGrid.tsx";
import { getCollection, type CollectionEntry } from "astro:content";
import GsapMorphLottie from "../components/GsapMorphLottie.tsx";

const withBase = (p?: string) => {
  if (!p) return undefined;
  const base = import.meta.env.BASE_URL || "/";
  const b = base.endsWith("/") ? base.slice(0, -1) : base;
  const pp = p.startsWith("/") ? p.slice(1) : p;
  return `${b}/${pp}`;
};

const animUrl = withBase("lottie/main_animation_new.json")!;

const name = "Adrian";
const titlePrimary = "Frontendutvecklare";
const titleSecondary = "Ortopedingenjör";
const intro = `Jag brinner för att bygga tillgängliga, prestandaoptimerade gränssnitt.
Med över 10 års erfarenhet som ortopedingenjör tar jag med mig ett användarcentrerat,
analytiskt arbetssätt in i webbutveckling – där funktion möter form.`;

const location = "Malmö, Sverige";
const availability = "Öppen för jobb- och frilansuppdrag";
const email = "adrianjonsson@hotmail.com";
const links = [
  { href: "https://github.com/AdrianCPO", label: "GitHub" },
  { href: "https://www.linkedin.com/in/adrian-jönsson-718884330", label: "LinkedIn" },
];

const bgRaw = await getCollection("backgrounds");
const bgItems = bgRaw
  .sort((a, b) => (a.data.order ?? 999) - (b.data.order ?? 999) || a.data.title.localeCompare(b.data.title))
  .slice(0, 3)
  .map((p: CollectionEntry<"backgrounds">) => ({
    slug: p.slug,
    title: p.data.title,
    summary: p.data.summary,
    image: withBase(p.data.image),
  }));

const raw = await getCollection("projects");
const allProjects: Project[] = raw
  .map((p: CollectionEntry<"projects">) => ({
    slug: p.id.split("/").pop()?.replace(/\.(md|mdx)$/, "") ?? p.id,
    title: p.data.title,
    summary: p.data.summary,
    tags: p.data.tags,
    image: withBase(p.data.image),
    repo: p.data.repo,
    demo: p.data.demo,
    date: p.data.date ?? null,
  }))
  .sort((a, b) => (b.date ?? "").localeCompare(a.date ?? ""));

const featured = allProjects.slice(0, 3);
---

<Base title={`${name} – Profil`}>
  <Fragment slot="header"><Nav client:load /></Fragment>

  <section class="mx-auto max-w-5xl px-0 py-6 sm:py-10">
    <div class="grid gap-6 sm:grid-cols-[auto,1fr] sm:items-center">
      <div>
        <h1 class="text-3xl sm:text-4xl font-bold tracking-tight">{name}</h1>
        <p class="mt-1 text-lg">
          {titlePrimary} · <span class="opacity-80">{titleSecondary}</span>
        </p>
        <p class="mt-4 max-w-2xl leading-relaxed opacity-90">{intro}</p>
      </div>
    </div>

    <div class="mt-8 grid gap-3 sm:grid-cols-3 text-sm">
      <div class="rounded-lg border p-3">
        <div class="font-semibold">Plats</div>
        <div class="opacity-80">{location}</div>
      </div>
      <div class="rounded-lg border p-3">
        <div class="font-semibold">Tillgänglighet</div>
        <div class="opacity-80">{availability}</div>
      </div>
      <div class="rounded-lg border p-3">
        <div class="font-semibold">Kontakt</div>
        <div class="opacity-80">
          <a class="underline" href={`mailto:${email}`}>{email}</a>
        </div>
      </div>
    </div>
  </section>

  <section class="mx-auto max-w-6xl mt-10">
    <div class="rounded-xl border p-6">
      <h3 class="font-semibold mb-2 text-lg">Varför ortopedingenjör → frontend?</h3>
      <p class="opacity-90">
        I ortopedteknik handlar allt om passform, funktion och att lyssna på användaren.
        Samma principer guidar mig i UI/UX: empati, noggrann problemlösning och iterativt arbete.
      </p>
    </div>
  </section>

  <section class="mx-auto max-w-6xl mt-10 grid md:grid-cols-[minmax(0,1fr)_420px] gap-10 items-start">
    <div class="space-y-10">
      <div id="skills-wrap" class="rounded-xl border p-4 min-h-[420px]">
        <h2 class="text-lg font-semibold mb-3">Färdigheter</h2>
        <div class="grid sm:grid-cols-2 gap-2">
          {bgItems.map((it) => (
            <div class="flex flex-col items-center justify-center text-center border rounded-lg p-2 hover:shadow-sm transition bg-white dark:bg-slate-900">
              {it.image && (
                <div class="h-20 w-full flex items-center justify-center mb-1">
                  <img src={it.image} alt={it.title} class="object-contain h-16" />
                </div>
              )}
              <h3 class="font-medium text-sm">{it.title}</h3>
              <p class="text-xs opacity-80 mt-1">{it.summary}</p>
            </div>
          ))}
        </div>
      </div>

      <div id="heart-wrap" class="rounded-xl border p-4 flex items-center justify-center min-h-[280px] bg-slate-50 dark:bg-slate-800">
        <p class="text-base opacity-70 italic">Empati & passion – hjärtat i min utveckling ❤️</p>
      </div>

      <div id="projects-wrap" class="rounded-xl border p-4 min-h-[420px]">
        <div class="flex items-baseline justify-between mb-3">
          <h2 class="text-lg font-semibold">Utvalda projekt</h2>
          <a class="text-xs underline" href={withBase("projects/")}>Visa alla</a>
        </div>
        <ProjectsGrid items={featured} />
      </div>
    </div>

    <!-- Höger: sticky lane + osynliga slots (döljs på <xl) -->
  <div class="relative hidden xl:block">
  <!-- lyft lane lite: top-16 -->
  <div id="icon-lane" class="sticky top-16 relative">
    <!-- slots – höjd synkas via komponenten -->
    <div id="slot-human" class="opacity-0 pointer-events-none"></div>
    <div id="slot-heart" class="opacity-0 pointer-events-none"></div>
    <div id="slot-dev"   class="opacity-0 pointer-events-none"></div>

       <GsapMorphLottie
      client:load
      jsonUrl={animUrl}
      stateMarkers={["human1","heart1","dev"]}
      cardSelectors={["#skills-wrap","#heart-wrap","#projects-wrap"]}
      slotSelectors={["#slot-human","#slot-heart","#slot-dev"]}
      laneSelector="#icon-lane"
      sizePx={1080}
      scale={1.45}
      initialIndex={0}
      segmentDurationMs={650}
      moveDuration={0.5}

    
      stateOffsetsPx={[
        { x: -140, y: -200 },  // human
        { x: -140, y: -200 },  // heart
        { x: -140, y: -200 },  // dev
      ]}
    />
  </div>
</div>
  </section>

  {links.length ? (
    <section class="mx-auto max-w-5xl mt-8">
      <ul class="flex flex-wrap gap-4 text-sm">
        {links.map((l) => (
          <li><a class="underline" href={l.href} target="_blank" rel="noopener">{l.label}</a></li>
        ))}
      </ul>
    </section>
  ) : null}

  <Fragment slot="footer"><Footer /></Fragment>
</Base>

---
import Base from "../layouts/Base.astro";
import Nav from "../components/Nav.tsx";
import Footer from "../components/Footer.tsx";
import ProjectsGrid, { type Project } from "../components/ProjectsGrid.tsx";
import { getCollection, type CollectionEntry } from "astro:content";

// Joinar BASE_URL + relativ path utan att använda new URL()
const withBase = (p?: string) => {
  if (!p) return undefined;
  const base = import.meta.env.BASE_URL || '/';
  const baseTrim = base.endsWith('/') ? base.slice(0, -1) : base;
  const pathTrim = p.startsWith('/') ? p.slice(1) : p;
  return `${baseTrim}/${pathTrim}`;
};

const raw = await getCollection("projects");
const projects: Project[] = raw
  .map((p: CollectionEntry<"projects">) => ({
    // Din version saknar "slug" i typerna: härled från filnamn
    slug: p.id.split("/").pop()?.replace(/\.(md|mdx)$/, "") ?? p.id,
    title: p.data.title,
    summary: p.data.summary,
    tags: p.data.tags,
    image: withBase(p.data.image), // ⬅️ ersätter new URL
    repo: p.data.repo,
    demo: p.data.demo,
    date: p.data.date,
  }))
  .sort((a, b) => (b.date ?? "").localeCompare(a.date ?? ""));
---
<Base title="Projekt – Adrian">
  <Fragment slot="header"><Nav client:load /></Fragment>
  <h1 class="text-2xl font-bold mb-4">Projekt</h1>
  <ProjectsGrid items={projects} client:load />
  <Fragment slot="footer"><Footer client:load /></Fragment>
</Base>
